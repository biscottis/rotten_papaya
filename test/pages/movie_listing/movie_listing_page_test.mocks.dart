// Mocks generated by Mockito 5.0.7 from annotations
// in rotten_papaya/test/pages/movie_listing/movie_listing_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:typed_data' as _i8;

import 'package:file/src/interface/file.dart' as _i2;
import 'package:flutter_cache_manager/src/cache_managers/base_cache_manager.dart'
    as _i5;
import 'package:flutter_cache_manager/src/result/file_info.dart' as _i3;
import 'package:flutter_cache_manager/src/result/file_response.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rotten_papaya/data/repositories/tmdb_repository.dart' as _i9;
import 'package:rotten_papaya/domain/entities/search_movie_response.dart'
    as _i4;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeFile extends _i1.Fake implements _i2.File {}

class _FakeFileInfo extends _i1.Fake implements _i3.FileInfo {}

class _FakeSearchMovieResponse extends _i1.Fake
    implements _i4.SearchMovieResponse {}

/// A class which mocks [BaseCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseCacheManager extends _i1.Mock implements _i5.BaseCacheManager {
  MockBaseCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.File> getSingleFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getSingleFile, [url], {#key: key, #headers: headers}),
              returnValue: Future<_i2.File>.value(_FakeFile()))
          as _i6.Future<_i2.File>);
  @override
  _i6.Stream<_i3.FileInfo> getFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#getFile, [url], {#key: key, #headers: headers}),
          returnValue:
              Stream<_i3.FileInfo>.empty()) as _i6.Stream<_i3.FileInfo>);
  @override
  _i6.Stream<_i7.FileResponse> getFileStream(String? url,
          {String? key, Map<String, String>? headers, bool? withProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#getFileStream, [url],
                  {#key: key, #headers: headers, #withProgress: withProgress}),
              returnValue: Stream<_i7.FileResponse>.empty())
          as _i6.Stream<_i7.FileResponse>);
  @override
  _i6.Future<_i3.FileInfo> downloadFile(String? url,
          {String? key,
          Map<String, String>? authHeaders,
          bool? force = false}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadFile, [url],
                  {#key: key, #authHeaders: authHeaders, #force: force}),
              returnValue: Future<_i3.FileInfo>.value(_FakeFileInfo()))
          as _i6.Future<_i3.FileInfo>);
  @override
  _i6.Future<_i3.FileInfo?> getFileFromCache(String? key,
          {bool? ignoreMemCache = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getFileFromCache, [key], {#ignoreMemCache: ignoreMemCache}),
              returnValue: Future<_i3.FileInfo?>.value(_FakeFileInfo()))
          as _i6.Future<_i3.FileInfo?>);
  @override
  _i6.Future<_i3.FileInfo?> getFileFromMemory(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFileFromMemory, [key]),
              returnValue: Future<_i3.FileInfo?>.value(_FakeFileInfo()))
          as _i6.Future<_i3.FileInfo?>);
  @override
  _i6.Future<_i2.File> putFile(String? url, _i8.Uint8List? fileBytes,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
              Invocation.method(#putFile, [
                url,
                fileBytes
              ], {
                #key: key,
                #eTag: eTag,
                #maxAge: maxAge,
                #fileExtension: fileExtension
              }),
              returnValue: Future<_i2.File>.value(_FakeFile()))
          as _i6.Future<_i2.File>);
  @override
  _i6.Future<_i2.File> putFileStream(String? url, _i6.Stream<List<int>>? source,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
              Invocation.method(#putFileStream, [
                url,
                source
              ], {
                #key: key,
                #eTag: eTag,
                #maxAge: maxAge,
                #fileExtension: fileExtension
              }),
              returnValue: Future<_i2.File>.value(_FakeFile()))
          as _i6.Future<_i2.File>);
  @override
  _i6.Future<void> removeFile(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeFile, [key]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> emptyCache() =>
      (super.noSuchMethod(Invocation.method(#emptyCache, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
}

/// A class which mocks [TmdbRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTmdbRepository extends _i1.Mock implements _i9.TmdbRepository {
  MockTmdbRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.SearchMovieResponse> searchMovie(String? query,
          {int? page = 1,
          bool? includeAdult = false,
          String? language = r'en-US',
          String? region,
          int? year,
          int? primaryReleaseYear}) =>
      (super.noSuchMethod(
              Invocation.method(#searchMovie, [
                query
              ], {
                #page: page,
                #includeAdult: includeAdult,
                #language: language,
                #region: region,
                #year: year,
                #primaryReleaseYear: primaryReleaseYear
              }),
              returnValue: Future<_i4.SearchMovieResponse>.value(
                  _FakeSearchMovieResponse()))
          as _i6.Future<_i4.SearchMovieResponse>);
}
